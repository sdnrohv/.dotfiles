-- Eviline config for lualine
-- Author: shadmansaleh
-- Credit: glepnir
local lualine = require("lualine")

-- Color table for highlights
-- stylua: ignore
local colors = {
    bg       = '#e3d7a3',
    fg       = '#3c3836',
    yellow   = '#b57614',
    cyan     = '#076678',
    darkblue = '#0d324d',
    green    = '#79740e',
    orange   = '#d65d0e',
    violet   = '#8f3f71',
    magenta  = '#b16286',
    blue     = '#076678',
    red      = '#9d0006',
    innerbg  = nil,
    -- cyan     = '#008080',
    -- darkblue = '#081633',
    -- green    = '#98be65',
    -- orange   = '#FF8800',
    -- violet   = '#a9a1e1',
    -- magenta  = '#c678dd',
    -- blue     = '#51afef',
    -- red      = '#ec5f67',
}

local conditions = {
    buffer_not_empty = function()
        return vim.fn.empty(vim.fn.expand("%:t")) ~= 1
    end,
    hide_in_width = function()
        return vim.fn.winwidth(0) > 80
    end,
    check_git_workspace = function()
        local filepath = vim.fn.expand("%:p:h")
        local gitdir = vim.fn.finddir(".git", filepath .. ";")
        return gitdir and #gitdir > 0 and #gitdir < #filepath
    end,
}

-- Config
local config = {
    options = {
        -- Disable sections and component separators
        component_separators = "",
        section_separators = "",
        globalstatus = true,
        theme = {
            -- We are going to use lualine_c an lualine_x as left and
            -- right section. Both are highlighted by c theme .  So we
            -- are just setting default looks o statusline
            normal = { c = { fg = colors.fg, bg = colors.bg } },
            inactive = { c = { fg = colors.fg, bg = colors.innerbg } },
        },
    },
    sections = {
        -- these are to remove the defaults
        lualine_a = {},
        lualine_b = {},
        lualine_y = {},
        lualine_z = {},
        -- These will be filled later
        lualine_c = {},
        lualine_x = {},
    },
    inactive_sections = {
        -- these are to remove the defaults
        lualine_a = {},
        lualine_b = {},
        lualine_y = {},
        lualine_z = {},
        lualine_c = {},
        lualine_x = {},
    },
}

-- Inserts a component in lualine_c at left section
local function ins_left(component)
    table.insert(config.sections.lualine_c, component)
end

-- Inserts a component in lualine_x at right section
local function ins_right(component)
    table.insert(config.sections.lualine_x, component)
end

ins_left({
    function()
        return "▊"
    end,
    color = { fg = colors.blue },   -- Sets highlighting of component
    padding = { left = 0, right = 1 }, -- We don't need space before this
})

ins_left({
    function()
        return " "
    end,
    color = { fg = colors.fg },
    padding = { left = 0 },
})

ins_left({
    symbols = {
        modified = "[+]", -- Text to show when the file is modified.
        readonly = "[-]", -- Text to show when the file is non-modifiable or readonly.
        unnamed = "[No Name]", -- Text to show for unnamed buffers.
        newfile = "[New]", -- Text to show for newly created file before first write
    },
    "filename",
    cond = conditions.buffer_not_empty,
    path = 3,
    shorting_target = 40,

    color = { fg = colors.fg, gui = "bold" },
})

-- ins_left({ "location" })

-- ins_left({ "progress", color = { fg = colors.fg, gui = "bold" } })

ins_left({
    symbols = {
        modified = " ●", -- Text to show when the buffer is modified
        alternate_file = "#", -- Text to show to identify the alternate file
        directory = "", -- Text to show when the buffer is a directory
    },
})
ins_left({
    "diagnostics",
    sources = { "nvim_diagnostic" },
    symbols = { error = "E ", warn = "W ", info = "I " },
    diagnostics_color = {
        color_error = { fg = colors.red, gui = "bold" },
        color_warn = { fg = colors.green },
        color_info = { fg = colors.cyan },
    },
})

-- Insert mid section. You can make any number of sections in neovim :)
-- for lualine it's any number greater then 2
ins_left({
    function()
        return "%="
    end,
})

-- ins_left({
--     -- Lsp server name .
--     function()
--         local msg = "No Active Lsp"
--         local buf_ft = vim.api.nvim_buf_get_option(0, "filetype")
--         local clients = vim.lsp.get_active_clients()
--         if next(clients) == nil then
--             return msg
--         end
--         for _, client in ipairs(clients) do
--             local filetypes = client.config.filetypes
--             if filetypes and vim.fn.index(filetypes, buf_ft) ~= -1 then
--                 return client.name
--             end
--         end
--         return msg
--     end,
--     icon = " LSP:",
--     color = { fg = "#ffffff", bg = colors.innerbg, gui = colors.innerbg },
-- })

-- Add components to right sections
ins_right({
    "o:encoding",    -- option component same as &encoding in viml
    fmt = string.upper, -- I'm not sure why it's upper case either ;)
    cond = conditions.hide_in_width,
    color = { fg = colors.green },
})

-- ins_right({
--     "fileformat",
--     fmt = string.upper,
--     icons_enabled = false, -- I think icons are cool but Eviline doesn't have them. sigh
--     color = { fg = colors.green, gui = "bold" },
-- })

ins_right({
    "branch",
    icon = "",
    color = { fg = colors.violet, gui = "bold" },
})

ins_right({
    "filetype",
    fmt = string.upper,
    padding = { right = 1, left = 1 },

    color = { fg = colors.fg, bg = "#fff9e0", gui = "bold" },
    icon = { color = { fg = colors.bg } },
})

ins_right({
    -- filesize component
    "filesize",
    cond = conditions.buffer_not_empty,
})
ins_right({
    "diff",
    -- Is it me or the symbol for modified us really weird
    symbols = { added = " ", modified = "󰝤 ", removed = " " },
    diff_color = {
        added = { fg = colors.green },
        modified = { fg = colors.orange },
        removed = { fg = colors.red },
    },
    cond = conditions.hide_in_width,
})

-- ins_right({
--     function()
--         return "▊"
--     end,
--     color = { fg = colors.blue },
--     padding = { left = 1, right = 0 },
-- })

-- Now don't forget to initialize lualine
lualine.setup(config)




------------------------------------------
-- DEVICON COLORS
local DevIcons = require("nvim-web-devicons")
DevIcons.set_icon({
    zig = {
        icon = "",
        color = "#f7a41d",
        cterm_color = "65",
        name = "Zig",
    },
    v = {
        icon = "",
        color = "#4b6b88",
        cterm_color = "65",
        name = "V",
    },
    lua = {
        icon = "",
        color = "#3E4451",
        cterm_color = "65",
        name = "Lua",
    },
    c = {
        icon = " ",
        color = "#3E4451",
        cterm_color = "65",
        name = "C",
    },
})




------------------------------------------
-- LUALINE
--

require("lualine").setup({
    options = {
        icons_enabled = true,
        theme = "gruvbox",
        component_separators = { left = "", right = "" },
        section_separators = { left = "", right = "" },
        disabled_filetypes = {
            statusline = {},
            winbar = {},
        },
        ignore_focus = {},
        always_divide_middle = false,
        globalstatus = true,
        refresh = {
            statusline = 1000,
            tabline = 1000,
            winbar = 1000,
        },
    },
    sections = {
        lualine_a = { "| filetype" },
        -- lualine_b = { "branch", "diff", "diagnostics" },
        lualine_b = { {
            "filename",
            path = 1,
        } },
        lualine_c = { "filetype", "diagnostics" },
        -- lualine_x = { "encoding", "fileformat", "filetype" },
        lualine_x = { "filetype" },
        -- lualine_y = { "progress" },
        lualine_y = {},
        lualine_z = { "location", "mode" },
    },
    inactive_sections = {
        lualine_a = {},
        lualine_b = {},
        lualine_c = { "filename" },
        lualine_x = { "location" },
        lualine_y = {},
        lualine_z = {},
    },
    tabline = {},
    winbar = {},
    inactive_winbar = {},
    extensions = {},
})
